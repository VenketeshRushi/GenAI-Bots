import FormField from "@/components/ImgGenration/FormField";
import ImgGenerationCard from "@/components/ImgGenration/ImgGenerationCard";
import ImgGenrationLoader from "@/components/ImgGenration/ImgGenrationLoader";
import { AnimatedGridPattern } from "@/components/ui/magicui/AnimatedGridPattern";
import { cn } from "@/lib/utils";
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";

const RenderCards = ({
	data,
	title,
}: {
	data: Post[] | null;
	title: string;
}) => {
	if (data && data?.length > 0) {
		return data.map((post) => <ImgGenerationCard key={post._id} {...post} />);
	}

	return (
		<h2 className="mt-5 font-bold text-primary text-xl uppercase underline">
			{title}
		</h2>
	);
};

export interface Post {
	_id: string;
	name: string;
	prompt: string;
	photo: string;
}

const ImageGenerationBot = () => {
	const [loading, setLoading] = useState<boolean>(false);
	const [allPosts, setAllPosts] = useState<Post[] | null>(null);
	const [searchText, setSearchText] = useState<string>("");
	const [searchResults, setSearchResults] = useState<Post[] | null>(null);
	const [searchTimeOut, setSearchTimeOut] = useState<
		NodeJS.Timeout | undefined
	>();

	console.log("searchTimeOut", searchTimeOut);

	useEffect(() => {
		const fetchPosts = async () => {
			setLoading(true);

			try {
				const response = await fetch(
					"https://reactjs-dall-e-app.onrender.com/api/v1/post",
					{
						method: "GET",
						headers: {
							"Content-Type": "application/json",
						},
					}
				);

				if (response.ok) {
					const result = await response.json();

					setAllPosts(result.data.reverse());
				}
			} catch (error) {
				console.log("error while fetching posts---", error);
			} finally {
				setLoading(false);
			}
		};

		fetchPosts();
	}, []);

	const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
		setSearchText(e.target.value);

		setSearchTimeOut(
			setTimeout(() => {
				const search_results = allPosts
					? allPosts.filter(
							(item) =>
								item.name.toLowerCase().includes(searchText.toLowerCase()) ||
								item.prompt.toLowerCase().includes(searchText.toLowerCase())
					  )
					: null;

				setSearchResults(search_results);
			}, 500)
		);
	};

	return (
		<div className="h-full p-4">
			<AnimatedGridPattern
				numSquares={30}
				maxOpacity={0.1}
				duration={3}
				repeatDelay={1}
				className={cn(
					"[mask-image:radial-gradient(500px_circle_at_center,white,transparent)]",
					"inset-x-0 inset-y-[-30%] h-[200%] skew-y-12 -z-10"
				)}
			/>

			<section className="max-w-7xl mx-auto mt-6">
				<div className="w-full flex justify-between items-start bg-transparent">
					<div>
						<h1 className="font-extrabold text-foreground text-[32px]">
							The Community Showcase
						</h1>
						<p className="mt-2 text-muted-foreground text-[16px] max-w-[500px]">
							Browse through a collection of imaginative and visually stunning
							images generated by DALL-E AI
						</p>
					</div>
					<div className="flex items-center space-x-2">
						<div className="flex items-center border-r-muted">
							<Link
								to={"/imagebot/create"}
								className="text-sm font-inter font-medium bg-primary text-background px-4 py-2 rounded-md"
							>
								Create
							</Link>
						</div>
					</div>
				</div>

				<div className="mt-12">
					<FormField
						labelName="Search posts"
						type="text"
						name="text"
						placeholder="Search posts"
						value={searchText}
						handleChange={handleSearchChange}
					/>
				</div>

				<div className="mt-10">
					{loading ? (
						<div className="flex justify-center items-center">
							<ImgGenrationLoader />
						</div>
					) : (
						<>
							{searchText && (
								<h2 className="font-medium text-muted-foreground text-xl mb-3">
									Showing results for{" "}
									<span className="text-primary">{searchText}</span>
								</h2>
							)}
							<div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
								{searchText ? (
									<RenderCards
										data={searchResults}
										title="No search results found"
									/>
								) : (
									<RenderCards data={allPosts} title="No posts found" />
								)}
							</div>
						</>
					)}
				</div>
			</section>
		</div>
	);
};

export default ImageGenerationBot;
